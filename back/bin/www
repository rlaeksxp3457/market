#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('back:server');
const http = require('http');
const helmet = require("helmet");
const prod = process.env.NODE_ENV === "production";
const hpp = require("hpp");
const morgan = require("morgan");
const cors = require("cors");
const fs = require("fs");

if (prod) {
  const sslServer = {
    ca: fs.readFileSync('./ssl/nowait.pw_nowait'),
    key: fs.readFileSync(''),
    cert: fs.readFileSync(''),
  };
  app.app.use(helmet());
  app.app.use(hpp());
  app.app.use(morgan("combined"));
  app.app.use(
      cors({
        origin: "https://nowait.pw",
        credentials: true,
      })
  );
} else {
  app.app(morgan("dev"));
  app.app(
      cors({
        origin: "http://localhost",
        credentials: true,
      })
  );
}
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || 443);
app.app.set('port', port);

/**
 * Create http server.
 */

const server = http.createServer(app.app/*, app.sslServer*/);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for http server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for http server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  app.connDB();
}
